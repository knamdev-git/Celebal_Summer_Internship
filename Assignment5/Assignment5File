Assignment-5

Question 1:
===========
To Create a Kubernetes Cluster using Minikube
for this 
- Installed Minikube and kubectl on local machine.
- Started the cluster:
    bash
    minikube start

Verified the cluster is running:

  bash
  kubectl get nodes
  
Question 2:
===========
To Create a Kubernetes Cluster using kubeadm

the steps are :

we set up two VMs: one master and one worker.
-> Installed Docker, kubeadm, kubelet, kubectl on both nodes.
-> Initialized master node:

  cmd :- 

  sudo kubeadm init --pod-network-cidr=192.168.0.0/16

Configured kubeconfig on master node.
Applied Calico network plugin:


  kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

 Joined the worker node to the cluster using `kubeadm join` command.

Question 3:
===========
Deploy an AKS Cluster using Azure Portal and Setup Dashboard + Roles

Steps are as follows :-
-> Created AKS cluster from Azure Portal with default settings.
-> Used Azure CLI to access the dashboard:

  CMD: az aks browse --resource-group <resource-group-name> --name <aks-cluster-name>
  
Created RBAC roles and bindings using YAML files for multiple users.
Assigned Azure AD roles via portal for role-based access.

Question 4:
===========
Deploy a Microservice Application on AKS and Expose Publicly

Steps are ->

Cloned sample microservice app:
CMD : 
git clone https://github.com/Azure-Samples/aks-store-demo.git
cd aks-store-demo
kubectl apply -f manifests/

Exposed frontend using LoadBalancer service:
  kubectl get svc frontend

Accessed the application via public IP in the browser.

Question 5:
===========
Expose Services using NodePort, ClusterIP, and LoadBalancer

NodePort Service

yaml file :- 

apiVersion: v1
kind: Service
metadata:
  name: nodeport-svc
spec:
  type: NodePort
  selector:
    app: myapp
  ports:
    - port: 80
      targetPort: 8080
      nodePort: 30036

-> ClusterIP Service (by default)

again yaml file ->

apiVersion: v1
kind: Service
metadata:
  name: clusterip-svc
spec:
  selector:
    app: myapp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

LoadBalancer Service

yaml file ->

apiVersion: v1
kind: Service
metadata:
  name: loadbalancer-svc
spec:
  type: LoadBalancer
  selector:
    app: myapp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

Commands Used like :

kubectl apply -f <service-file>.yaml
kubectl get svc

